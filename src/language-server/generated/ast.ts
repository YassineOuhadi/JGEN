/******************************************************************************
 * This file was generated by langium-cli 1.0.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';

export type Configuration = Datasource | Metadata | Server;

export const Configuration = 'Configuration';

export function isConfiguration(item: unknown): item is Configuration {
    return reflection.isInstance(item, Configuration);
}

export type QualifiedName = string;

export type StructuralComponent = Controller | Entity | Enum | Relationship | Repository | Service;

export const StructuralComponent = 'StructuralComponent';

export function isStructuralComponent(item: unknown): item is StructuralComponent {
    return reflection.isInstance(item, StructuralComponent);
}

export interface Attribute extends AstNode {
    readonly $container: Entity;
    readonly $type: 'Attribute';
    enumType?: Reference<Enum>
    name: string
    nullable: boolean
    primaryKey: boolean
    type?: string
}

export const Attribute = 'Attribute';

export function isAttribute(item: unknown): item is Attribute {
    return reflection.isInstance(item, Attribute);
}

export interface Controller extends AstNode {
    readonly $container: Project;
    readonly $type: 'Controller';
    entity: Reference<Entity>
    name: string
    routes: Array<Route>
    service: Reference<Service>
}

export const Controller = 'Controller';

export function isController(item: unknown): item is Controller {
    return reflection.isInstance(item, Controller);
}

export interface Database extends AstNode {
    readonly $container: Datasource;
    readonly $type: 'Database';
    name: string
}

export const Database = 'Database';

export function isDatabase(item: unknown): item is Database {
    return reflection.isInstance(item, Database);
}

export interface Datasource extends AstNode {
    readonly $container: Project;
    readonly $type: 'Datasource';
    database: Database
    host: Host
    port: Port
    type: string
}

export const Datasource = 'Datasource';

export function isDatasource(item: unknown): item is Datasource {
    return reflection.isInstance(item, Datasource);
}

export interface Entity extends AstNode {
    readonly $container: Project;
    readonly $type: 'Entity';
    attributes: Array<Attribute>
    name: string
}

export const Entity = 'Entity';

export function isEntity(item: unknown): item is Entity {
    return reflection.isInstance(item, Entity);
}

export interface Enum extends AstNode {
    readonly $container: Project;
    readonly $type: 'Enum';
    literals: Array<Literal>
    name: string
}

export const Enum = 'Enum';

export function isEnum(item: unknown): item is Enum {
    return reflection.isInstance(item, Enum);
}

export interface Host extends AstNode {
    readonly $container: Datasource | Server;
    readonly $type: 'Host';
    name: string
}

export const Host = 'Host';

export function isHost(item: unknown): item is Host {
    return reflection.isInstance(item, Host);
}

export interface Literal extends AstNode {
    readonly $container: Enum;
    readonly $type: 'Literal';
    name: string
    value?: string
}

export const Literal = 'Literal';

export function isLiteral(item: unknown): item is Literal {
    return reflection.isInstance(item, Literal);
}

export interface Metadata extends AstNode {
    readonly $container: Project;
    readonly $type: 'Metadata';
    artifact: string
    description: string
    group: QualifiedName
    javaVersion: '11' | '17' | '21' | '8'
    name: QualifiedName
    package: QualifiedName
    packaging: 'Jar' | 'War'
    springVersion: '2.7.17' | '2.7.18' | '3.0.12' | '3.0.13' | '3.1.5' | '3.1.6' | '3.2.0'
    tool: string
}

export const Metadata = 'Metadata';

export function isMetadata(item: unknown): item is Metadata {
    return reflection.isInstance(item, Metadata);
}

export interface Method extends AstNode {
    readonly $container: Service;
    readonly $type: 'Method';
    name: string
    parameters: Array<Parameter>
}

export const Method = 'Method';

export function isMethod(item: unknown): item is Method {
    return reflection.isInstance(item, Method);
}

export interface Operation extends AstNode {
    readonly $container: Route;
    readonly $type: 'Operation';
    name: string
}

export const Operation = 'Operation';

export function isOperation(item: unknown): item is Operation {
    return reflection.isInstance(item, Operation);
}

export interface Parameter extends AstNode {
    readonly $container: Method | Query | RequestBody;
    readonly $type: 'Parameter';
    attribute: string
    name: string
    required: boolean
}

export const Parameter = 'Parameter';

export function isParameter(item: unknown): item is Parameter {
    return reflection.isInstance(item, Parameter);
}

export interface Path extends AstNode {
    readonly $container: Route;
    readonly $type: 'Path';
    name: string
}

export const Path = 'Path';

export function isPath(item: unknown): item is Path {
    return reflection.isInstance(item, Path);
}

export interface Port extends AstNode {
    readonly $container: Datasource | Server;
    readonly $type: 'Port';
    name: number
}

export const Port = 'Port';

export function isPort(item: unknown): item is Port {
    return reflection.isInstance(item, Port);
}

export interface Project extends AstNode {
    readonly $type: 'Project';
    configuration: Configuration
    name: string
    structuralComponents: Array<StructuralComponent>
}

export const Project = 'Project';

export function isProject(item: unknown): item is Project {
    return reflection.isInstance(item, Project);
}

export interface Query extends AstNode {
    readonly $container: Repository;
    readonly $type: 'Query';
    name: string
    parameters: Array<Parameter>
    type?: string
}

export const Query = 'Query';

export function isQuery(item: unknown): item is Query {
    return reflection.isInstance(item, Query);
}

export interface Relationship extends AstNode {
    readonly $container: Project;
    readonly $type: 'Relationship';
    from: Reference<Entity>
    to: Reference<Entity>
    type: string
}

export const Relationship = 'Relationship';

export function isRelationship(item: unknown): item is Relationship {
    return reflection.isInstance(item, Relationship);
}

export interface Repository extends AstNode {
    readonly $container: Project;
    readonly $type: 'Repository';
    entity: Reference<Entity>
    name: string
    queries: Array<Query>
}

export const Repository = 'Repository';

export function isRepository(item: unknown): item is Repository {
    return reflection.isInstance(item, Repository);
}

export interface RequestBody extends AstNode {
    readonly $container: Route;
    readonly $type: 'RequestBody';
    parameters: Array<Parameter>
}

export const RequestBody = 'RequestBody';

export function isRequestBody(item: unknown): item is RequestBody {
    return reflection.isInstance(item, RequestBody);
}

export interface RequestParameter extends AstNode {
    readonly $container: Route;
    readonly $type: 'RequestParameter';
    attribute: string
    name: string
    required: boolean
}

export const RequestParameter = 'RequestParameter';

export function isRequestParameter(item: unknown): item is RequestParameter {
    return reflection.isInstance(item, RequestParameter);
}

export interface Route extends AstNode {
    readonly $container: Controller;
    readonly $type: 'Route';
    name: string
    operation: Operation
    path: Path
    requestBody?: RequestBody
    requestParameters: Array<RequestParameter>
}

export const Route = 'Route';

export function isRoute(item: unknown): item is Route {
    return reflection.isInstance(item, Route);
}

export interface Server extends AstNode {
    readonly $container: Project;
    readonly $type: 'Server';
    host: Host
    port: Port
}

export const Server = 'Server';

export function isServer(item: unknown): item is Server {
    return reflection.isInstance(item, Server);
}

export interface Service extends AstNode {
    readonly $container: Project;
    readonly $type: 'Service';
    entity: Reference<Entity>
    methods: Array<Method>
    name: string
    repository: Reference<Repository>
}

export const Service = 'Service';

export function isService(item: unknown): item is Service {
    return reflection.isInstance(item, Service);
}

export interface JgenAstType {
    Attribute: Attribute
    Configuration: Configuration
    Controller: Controller
    Database: Database
    Datasource: Datasource
    Entity: Entity
    Enum: Enum
    Host: Host
    Literal: Literal
    Metadata: Metadata
    Method: Method
    Operation: Operation
    Parameter: Parameter
    Path: Path
    Port: Port
    Project: Project
    Query: Query
    Relationship: Relationship
    Repository: Repository
    RequestBody: RequestBody
    RequestParameter: RequestParameter
    Route: Route
    Server: Server
    Service: Service
    StructuralComponent: StructuralComponent
}

export class JgenAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Attribute', 'Configuration', 'Controller', 'Database', 'Datasource', 'Entity', 'Enum', 'Host', 'Literal', 'Metadata', 'Method', 'Operation', 'Parameter', 'Path', 'Port', 'Project', 'Query', 'Relationship', 'Repository', 'RequestBody', 'RequestParameter', 'Route', 'Server', 'Service', 'StructuralComponent'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case Controller:
            case Entity:
            case Enum:
            case Relationship:
            case Repository:
            case Service: {
                return this.isSubtype(StructuralComponent, supertype);
            }
            case Datasource:
            case Metadata:
            case Server: {
                return this.isSubtype(Configuration, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Attribute:enumType': {
                return Enum;
            }
            case 'Controller:entity':
            case 'Relationship:from':
            case 'Relationship:to':
            case 'Repository:entity':
            case 'Service:entity': {
                return Entity;
            }
            case 'Controller:service': {
                return Service;
            }
            case 'Service:repository': {
                return Repository;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Attribute': {
                return {
                    name: 'Attribute',
                    mandatory: [
                        { name: 'nullable', type: 'boolean' },
                        { name: 'primaryKey', type: 'boolean' }
                    ]
                };
            }
            case 'Controller': {
                return {
                    name: 'Controller',
                    mandatory: [
                        { name: 'routes', type: 'array' }
                    ]
                };
            }
            case 'Entity': {
                return {
                    name: 'Entity',
                    mandatory: [
                        { name: 'attributes', type: 'array' }
                    ]
                };
            }
            case 'Enum': {
                return {
                    name: 'Enum',
                    mandatory: [
                        { name: 'literals', type: 'array' }
                    ]
                };
            }
            case 'Method': {
                return {
                    name: 'Method',
                    mandatory: [
                        { name: 'parameters', type: 'array' }
                    ]
                };
            }
            case 'Parameter': {
                return {
                    name: 'Parameter',
                    mandatory: [
                        { name: 'required', type: 'boolean' }
                    ]
                };
            }
            case 'Project': {
                return {
                    name: 'Project',
                    mandatory: [
                        { name: 'structuralComponents', type: 'array' }
                    ]
                };
            }
            case 'Query': {
                return {
                    name: 'Query',
                    mandatory: [
                        { name: 'parameters', type: 'array' }
                    ]
                };
            }
            case 'Repository': {
                return {
                    name: 'Repository',
                    mandatory: [
                        { name: 'queries', type: 'array' }
                    ]
                };
            }
            case 'RequestBody': {
                return {
                    name: 'RequestBody',
                    mandatory: [
                        { name: 'parameters', type: 'array' }
                    ]
                };
            }
            case 'RequestParameter': {
                return {
                    name: 'RequestParameter',
                    mandatory: [
                        { name: 'required', type: 'boolean' }
                    ]
                };
            }
            case 'Route': {
                return {
                    name: 'Route',
                    mandatory: [
                        { name: 'requestParameters', type: 'array' }
                    ]
                };
            }
            case 'Service': {
                return {
                    name: 'Service',
                    mandatory: [
                        { name: 'methods', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new JgenAstReflection();
