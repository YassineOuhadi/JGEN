import fs from 'fs';
import { CompositeGeneratorNode, NL, Reference, toString } from 'langium';
import path from 'path';
import { Entity, Attribute, Project } from '../language-server/generated/ast';
import { extractDestinationAndName } from '../cli/cli-util';

export function generateEcore(model: Project, filePath: string, destination: string | undefined): string {
    const data = extractDestinationAndName(filePath, destination);
    const generatedFilePath = `${path.join(data.destination, data.name)}.ecore`;

    const fileNode = new CompositeGeneratorNode();

    fileNode.append("// automatically generated by Jgen", NL, "//Please report any bug or improvement as an issues in https://github.com/othy1010/JGEN", NL, NL, '<?xml version="1.0" encoding="UTF-8"?>', NL);

    // fileNode.append(`<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name=${model.name}>`);
    // model.entities.forEach(entity => fileNode.append(generateEClass(entity), NL));
    // model.relationships.forEach(relationship => fileNode.append(generateEReference(relationship), NL));
    // fileNode.append(`</ecore:EPackage>`);


    // fileNode.append(`<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name=${'"'+model.name+'"'}>
    // ${model.entities ? model.entities.map(generateEClass).join("\n") : ""}
    // </ecore:EPackage>`);

    fileNode.append(`<ecore:EPackage xmi:version="2.0"
                 xmlns:xmi="http://www.omg.org/XMI"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
                 name="${model.name}">
    ${(model.structuralComponents.filter(component => component.$type === 'Entity') as Entity[]).map(generateEClass).join('\n')}
    </ecore:EPackage>`);

    if (!fs.existsSync(data.destination)) {
        fs.mkdirSync(data.destination, { recursive: true });
    }
    fs.writeFileSync(generatedFilePath, toString(fileNode));
    return generatedFilePath;
}

function generateEClass(entity: Entity): string {
    const eClassNode = new CompositeGeneratorNode();
    
    // eClassNode.append(`<eClassifiers xsi:type="ecore:EClass" name=${entity.name}>`, NL);

    // entity.fields.forEach(field => {
    //     eClassNode.append(generateEAttribute(field), NL);
    // });

    // entity.controller && eClassNode.append(generateEClass(entity.controller), NL);
    // entity.repository && eClassNode.append(generateEClass(entity.repository), NL);
    // entity.service && eClassNode.append(generateEClass(entity.service), NL);

    // eClassNode.append("</eClassifiers>", NL);

    eClassNode.append(`<eClassifiers xsi:type="ecore:EClass" name="${entity.name}">
    ${(entity.attributes || []).map(generateEAttribute).join('\n')}
    </eClassifiers>`);

    return toString(eClassNode);
}

function generateEAttribute(field: Attribute): string {

    // const eAttributeNode = new CompositeGeneratorNode();
    // eAttributeNode.append(`<eStructuralFeatures xsi:type="ecore:EAttribute" name=${field.name} eType="ecore:EString"`, NL);
    // if (field.primaryKey) {
    //     eAttributeNode.append(`eAnnotations`, NL);
    //     eAttributeNode.append(`xsi:type="ecore:EAnnotation" source="http://www.eclipse.org/emf/2002/Ecore"`, NL);
    //     eAttributeNode.append(`details="http:///org/eclipse/emf/ecore/util/ExtendedMetaData#key"`);

    //     eAttributeNode.append(`</eAnnotations>`, NL);
    // }
    // eAttributeNode.append("</eStructuralFeatures>", NL);

    // return toString(eAttributeNode);

    return `<eStructuralFeatures xsi:type="ecore:EAttribute" name=${'"'+field.name+'"'}/>`;

}